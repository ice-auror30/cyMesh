#!/bin/bash

# Tests for Serval MeshMS1.
#
# Copyright 2012 Serval Project, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

source "${0%/*}/../jni/serval-dna/testframework.sh"
source "${0%/*}/../testdefs.sh"

setup() {
   export ATOOL_LOG_DIR="$TFWVAR/alog"
   # Make sure we have at least two devices connected, grab the first two.
   executeOk "$atool" list-devices
   assertStdoutLineCount '>=' 2
   for n in 1 2; do
      local dev
      eval "$(replayStdout | sed -n -e ${n}p)"
      assert [ -n "$dev" ]
      eval "dev$n=$dev"
   done
   atoolargs="-b -s $dev1 -s $dev2"
   # Get the SIDs of both phones.
   if false; then
      # Reset the Serval Mesh software and erase all Serval state on each phone.
      # The user will have to manually press the "OK" buttons for the "Here Be
      # Dragons" dialog, the Root Requested dialog, and all the steps of the Setup
      # Wizard.
      executeOk "$atool" $atoolargs \
         app-uninstall \
         sudo rm -r /sdcard/serval \; \
         app-install-debug \
         app-start
      tfw_cat "$ATOOL_LOG_DIR"/*
      wait_until --timeout=600 --sleep=5 sids_available 2
   else
      assert sids_available 2
   fi
   tfw_cat --stdout
   assertStdoutLineCount '==' 2
   local n
   for n in 1 2; do
      local sid dev
      eval "$(replayStdout | sed -n -e ${n}p)"
      assertExpr "$sid" '~' "^$rexp_sid\$"
      local devvar="dev$n"
      assert [ "$dev" = "${!devvar}" ]
      eval "sid$n=$sid"
   done
   assert [ -n "$sid1" ]
   assert [ -n "$sid2" ]
   assert [ "$sid1" != "$sid2" ]
   rm -f "$ATOOL_LOG_DIR"/*
   # Clear the Android logs and start collecting them.
   executeOk "$atool" $atoolargs logcat -c
   >log2
   executeOk "$atool" -o log1 -s $dev1 logcat &
   executeOk "$atool" -o log2 -s $dev2 logcat &
}

teardown() {
   tfw_cat log1 log2
}

sids_available() {
   executeOk "$atool" $atoolargs list-sid1
   [ $(replayStdout | wc -l) -ge $1 ]
}

doc_meshms="Batphone MeshMS functions"
test_meshms() {
   executeOk "$atool" -b -s $dev1 meshms-send $sid2 "This is a test!"
   wait_until grep "MESHMS SENT senderSID=$sid1 recipientSID=$sid2.* content=This is a test!" log1 >sent
   millis=$(sed -n -e '1s/.* millis=\([0-9]\+\).*/\1/p' sent) || error
   tfw_cat "$ATOOL_LOG_DIR/$dev1"
   #wait_until grep 'RHIZOME ADD MANIFEST service=MeshMS1' log2
   wait_until grep "MESHMS RECEIVED senderSID=$sid1 recipientSID=$sid2 .*millis=$millis content=This is a test!" log2
   assertGrep --matches=1 log2 "MESHMS RECEIVED senderSID=$sid1 recipientSID=$sid2.* content=This is a test!"
   wait_until grep "MESHMS SENT ACK senderSID=$sid2 recipientSID=$sid1 .*millis=$millis" log2 >ack
   offset=$(sed -n -e '1s/.* offset=\([0-9]\+\).*/\1/p' ack) || error
   wait_until grep "MESHMS RECEIVED ACK senderSID=$sid2 recipientSID=$sid1.* millis=$millis offset=$offset" log1
}

runTests "$@"
